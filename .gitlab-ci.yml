image: node:latest

services:
  - postgres:11
  - mysql:latest
  - mariadb:latest

variables:
  # Configure postgres service (https://hub.docker.com/_/postgres/)
  POSTGRES_DB: custom_db
  POSTGRES_USER: custom_user
  POSTGRES_PASSWORD: custom_pass
  MYSQL_DATABASE: el_duderino
  MYSQL_ROOT_PASSWORD: mysql_strong_password

before_script:
#  - apk add --update curl py-setuptools && rm -rf /var/cache/apk/*
#  - curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain nightly
#  - ln -s ~/.cargo/bin/cargo /usr/local/bin/cargo
#  - ln -s ~/.cargo/bin/rustc /usr/local/bin/rustc
#  - easy_install pgxnclient
#  - bash -c "pgxn install jsoncdc --testing"
  - npm install
  - npm run-script test-ci

connect_postgres:
  image: postgres:11
  script:
  # official way to provide password to psql: http://www.postgresql.org/docs/9.3/static/libpq-envars.html
  - export PGPASSWORD=$POSTGRES_PASSWORD
  - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "SELECT 'OK' AS status;"

connect_mysql:
  image: mysql:latest
  script:
  - mysql -h mysql -u root -p$MYSQL_ROOT_PASSWORD -e"quit"

connect_mariadb:
  image: mariadb:latest
  script:
  - mysql -h mysql -u root -p$MYSQL_ROOT_PASSWORD -e"quit"

bootstrap_postgres:
  stage: build
  image: postgres:11
  script:
  - export PGPASSWORD=$POSTGRES_PASSWORD
  - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f ./test/sql/bootstrap_postgresql.sql

bootstrap_mysql:
  stage: build
  image: mysql:latest
  script:
  - mysql -h mysql -u root -p$MYSQL_ROOT_PASSWORD < ./test/sql/bootstrap_mysql.sql

bootstrap_mariadb:
  stage: build
  image: mariadb:latest
  script:
  - mysql -h mysql -u root -p$MYSQL_ROOT_PASSWORD < ./test/sql/bootstrap_mysql.sql

bootstrap_mongodb:
  stage: build
  script:
  - mkdir the_hatch
  - wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1404-3.4.1.tgz -O /tmp/mongodb.tgz
  - tar -xvf /tmp/mongodb.tgz
  - ${PWD}/mongodb-linux-x86_64-ubuntu1404-3.4.1/bin/mongod --port 27017 --dbpath the_hatch --replSet rs0 --oplogSize 20 --noprealloc --fork --smallfiles --logpath mongodb.log
  - until nc -z localhost 27017; do echo Waiting for MongoDB; sleep 1; done
  - ${PWD}/mongodb-linux-x86_64-ubuntu1404-3.4.1/bin/mongo lapidus --eval 'printjson(rs.initiate());'
  - sleep 10
  - ${PWD}/mongodb-linux-x86_64-ubuntu1404-3.4.1/bin/mongo lapidus --eval 'db.getMongo().setSlaveOk();'
  - ${PWD}/mongodb-linux-x86_64-ubuntu1404-3.4.1/bin/mongo lapidus --eval 'db.createUser({user:"lapidus",pwd:"2PQM9aiKMJX5chv76gYdFJNi",roles:[{role:"clusterAdmin",db:"admin"},{role:"readAnyDatabase",db:"admin"},"readWrite"]});'
  - ${PWD}/mongodb-linux-x86_64-ubuntu1404-3.4.1/bin/mongo lapidus --eval 'db.createUser({user:"walt",pwd:"EnlmLSvK6XeneMKZOhXGEnNtvUgHtuFV2ZZi",roles:[{role:"clusterAdmin",db:"admin"},{role:"readAnyDatabase",db:"admin"},"readWrite"]});'

coverage:
  script:
  - istanbul cover _mocha -- -R spec ./test/*

after_script:
  - cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js
